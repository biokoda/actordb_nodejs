//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./adbt_types');
//HELPER FUNCTIONS AND STRUCTURES

Actordb_protocolVersion_args = function(args) {
};
Actordb_protocolVersion_args.prototype = {};
Actordb_protocolVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_protocolVersion_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_protocolVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_protocolVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Actordb_protocolVersion_result.prototype = {};
Actordb_protocolVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_protocolVersion_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_protocolVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_login_args = function(args) {
  this.username = null;
  this.password = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field username is unset!');
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field password is unset!');
    }
  }
};
Actordb_login_args.prototype = {};
Actordb_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_login_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_login_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_login_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.LoginResult(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_login_result.prototype = {};
Actordb_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.LoginResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_login_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_salt_args = function(args) {
};
Actordb_salt_args.prototype = {};
Actordb_salt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_salt_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_salt_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_salt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Actordb_salt_result.prototype = {};
Actordb_salt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_salt_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_salt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_config_args = function(args) {
  this.sql = null;
  if (args) {
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
  }
};
Actordb_exec_config_args.prototype = {};
Actordb_exec_config_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_config_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_config_args');
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 1);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_config_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_config_result.prototype = {};
Actordb_exec_config_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_config_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_config_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_schema_args = function(args) {
  this.sql = null;
  if (args) {
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
  }
};
Actordb_exec_schema_args.prototype = {};
Actordb_exec_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_schema_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_schema_args');
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 1);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_schema_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_schema_result.prototype = {};
Actordb_exec_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_schema_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_single_args = function(args) {
  this.actorname = null;
  this.actortype = null;
  this.sql = null;
  this.flags = [];
  if (args) {
    if (args.actorname !== undefined && args.actorname !== null) {
      this.actorname = args.actorname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actorname is unset!');
    }
    if (args.actortype !== undefined && args.actortype !== null) {
      this.actortype = args.actortype;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actortype is unset!');
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = Thrift.copyList(args.flags, [null]);
    }
  }
};
Actordb_exec_single_args.prototype = {};
Actordb_exec_single_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.actorname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.actortype = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.flags = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.flags.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_single_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_single_args');
  if (this.actorname !== null && this.actorname !== undefined) {
    output.writeFieldBegin('actorname', Thrift.Type.STRING, 1);
    output.writeString(this.actorname);
    output.writeFieldEnd();
  }
  if (this.actortype !== null && this.actortype !== undefined) {
    output.writeFieldBegin('actortype', Thrift.Type.STRING, 2);
    output.writeString(this.actortype);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 3);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.flags.length);
    for (var iter49 in this.flags)
    {
      if (this.flags.hasOwnProperty(iter49))
      {
        iter49 = this.flags[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_single_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_single_result.prototype = {};
Actordb_exec_single_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_single_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_single_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_single_param_args = function(args) {
  this.actorname = null;
  this.actortype = null;
  this.sql = null;
  this.flags = [];
  this.bindingvals = [];
  if (args) {
    if (args.actorname !== undefined && args.actorname !== null) {
      this.actorname = args.actorname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actorname is unset!');
    }
    if (args.actortype !== undefined && args.actortype !== null) {
      this.actortype = args.actortype;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actortype is unset!');
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = Thrift.copyList(args.flags, [null]);
    }
    if (args.bindingvals !== undefined && args.bindingvals !== null) {
      this.bindingvals = Thrift.copyList(args.bindingvals, [Thrift.copyList, ttypes.Val]);
    }
  }
};
Actordb_exec_single_param_args.prototype = {};
Actordb_exec_single_param_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.actorname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.actortype = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.flags = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readString();
          this.flags.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size57 = 0;
        var _rtmp361;
        this.bindingvals = [];
        var _etype60 = 0;
        _rtmp361 = input.readListBegin();
        _etype60 = _rtmp361.etype;
        _size57 = _rtmp361.size;
        for (var _i62 = 0; _i62 < _size57; ++_i62)
        {
          var elem63 = null;
          var _size64 = 0;
          var _rtmp368;
          elem63 = [];
          var _etype67 = 0;
          _rtmp368 = input.readListBegin();
          _etype67 = _rtmp368.etype;
          _size64 = _rtmp368.size;
          for (var _i69 = 0; _i69 < _size64; ++_i69)
          {
            var elem70 = null;
            elem70 = new ttypes.Val();
            elem70.read(input);
            elem63.push(elem70);
          }
          input.readListEnd();
          this.bindingvals.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_single_param_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_single_param_args');
  if (this.actorname !== null && this.actorname !== undefined) {
    output.writeFieldBegin('actorname', Thrift.Type.STRING, 1);
    output.writeString(this.actorname);
    output.writeFieldEnd();
  }
  if (this.actortype !== null && this.actortype !== undefined) {
    output.writeFieldBegin('actortype', Thrift.Type.STRING, 2);
    output.writeString(this.actortype);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 3);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.flags.length);
    for (var iter71 in this.flags)
    {
      if (this.flags.hasOwnProperty(iter71))
      {
        iter71 = this.flags[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bindingvals !== null && this.bindingvals !== undefined) {
    output.writeFieldBegin('bindingvals', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.LIST, this.bindingvals.length);
    for (var iter72 in this.bindingvals)
    {
      if (this.bindingvals.hasOwnProperty(iter72))
      {
        iter72 = this.bindingvals[iter72];
        output.writeListBegin(Thrift.Type.STRUCT, iter72.length);
        for (var iter73 in iter72)
        {
          if (iter72.hasOwnProperty(iter73))
          {
            iter73 = iter72[iter73];
            iter73.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_single_param_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_single_param_result.prototype = {};
Actordb_exec_single_param_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_single_param_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_single_param_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_multi_args = function(args) {
  this.actors = null;
  this.actortype = null;
  this.sql = null;
  this.flags = [];
  if (args) {
    if (args.actors !== undefined && args.actors !== null) {
      this.actors = Thrift.copyList(args.actors, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actors is unset!');
    }
    if (args.actortype !== undefined && args.actortype !== null) {
      this.actortype = args.actortype;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actortype is unset!');
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = Thrift.copyList(args.flags, [null]);
    }
  }
};
Actordb_exec_multi_args.prototype = {};
Actordb_exec_multi_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.actors = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = input.readString();
          this.actors.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.actortype = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size81 = 0;
        var _rtmp385;
        this.flags = [];
        var _etype84 = 0;
        _rtmp385 = input.readListBegin();
        _etype84 = _rtmp385.etype;
        _size81 = _rtmp385.size;
        for (var _i86 = 0; _i86 < _size81; ++_i86)
        {
          var elem87 = null;
          elem87 = input.readString();
          this.flags.push(elem87);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_multi_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_multi_args');
  if (this.actors !== null && this.actors !== undefined) {
    output.writeFieldBegin('actors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.actors.length);
    for (var iter88 in this.actors)
    {
      if (this.actors.hasOwnProperty(iter88))
      {
        iter88 = this.actors[iter88];
        output.writeString(iter88);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actortype !== null && this.actortype !== undefined) {
    output.writeFieldBegin('actortype', Thrift.Type.STRING, 2);
    output.writeString(this.actortype);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 3);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.flags.length);
    for (var iter89 in this.flags)
    {
      if (this.flags.hasOwnProperty(iter89))
      {
        iter89 = this.flags[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_multi_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_multi_result.prototype = {};
Actordb_exec_multi_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_multi_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_multi_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_all_args = function(args) {
  this.actortype = null;
  this.sql = null;
  this.flags = [];
  if (args) {
    if (args.actortype !== undefined && args.actortype !== null) {
      this.actortype = args.actortype;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actortype is unset!');
    }
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = Thrift.copyList(args.flags, [null]);
    }
  }
};
Actordb_exec_all_args.prototype = {};
Actordb_exec_all_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.actortype = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size90 = 0;
        var _rtmp394;
        this.flags = [];
        var _etype93 = 0;
        _rtmp394 = input.readListBegin();
        _etype93 = _rtmp394.etype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var elem96 = null;
          elem96 = input.readString();
          this.flags.push(elem96);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_all_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_all_args');
  if (this.actortype !== null && this.actortype !== undefined) {
    output.writeFieldBegin('actortype', Thrift.Type.STRING, 1);
    output.writeString(this.actortype);
    output.writeFieldEnd();
  }
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 2);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.flags.length);
    for (var iter97 in this.flags)
    {
      if (this.flags.hasOwnProperty(iter97))
      {
        iter97 = this.flags[iter97];
        output.writeString(iter97);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_all_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_all_result.prototype = {};
Actordb_exec_all_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_all_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_all_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_sql_args = function(args) {
  this.sql = null;
  if (args) {
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
  }
};
Actordb_exec_sql_args.prototype = {};
Actordb_exec_sql_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_sql_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_sql_args');
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 1);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_sql_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_sql_result.prototype = {};
Actordb_exec_sql_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_sql_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_sql_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_sql_param_args = function(args) {
  this.sql = null;
  this.bindingvals = [];
  if (args) {
    if (args.sql !== undefined && args.sql !== null) {
      this.sql = args.sql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sql is unset!');
    }
    if (args.bindingvals !== undefined && args.bindingvals !== null) {
      this.bindingvals = Thrift.copyList(args.bindingvals, [Thrift.copyList, ttypes.Val]);
    }
  }
};
Actordb_exec_sql_param_args.prototype = {};
Actordb_exec_sql_param_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sql = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.bindingvals = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          var _size105 = 0;
          var _rtmp3109;
          elem104 = [];
          var _etype108 = 0;
          _rtmp3109 = input.readListBegin();
          _etype108 = _rtmp3109.etype;
          _size105 = _rtmp3109.size;
          for (var _i110 = 0; _i110 < _size105; ++_i110)
          {
            var elem111 = null;
            elem111 = new ttypes.Val();
            elem111.read(input);
            elem104.push(elem111);
          }
          input.readListEnd();
          this.bindingvals.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_sql_param_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_sql_param_args');
  if (this.sql !== null && this.sql !== undefined) {
    output.writeFieldBegin('sql', Thrift.Type.STRING, 1);
    output.writeString(this.sql);
    output.writeFieldEnd();
  }
  if (this.bindingvals !== null && this.bindingvals !== undefined) {
    output.writeFieldBegin('bindingvals', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.bindingvals.length);
    for (var iter112 in this.bindingvals)
    {
      if (this.bindingvals.hasOwnProperty(iter112))
      {
        iter112 = this.bindingvals[iter112];
        output.writeListBegin(Thrift.Type.STRUCT, iter112.length);
        for (var iter113 in iter112)
        {
          if (iter112.hasOwnProperty(iter113))
          {
            iter113 = iter112[iter113];
            iter113.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_exec_sql_param_result = function(args) {
  this.success = null;
  this.ire = null;
  if (args instanceof ttypes.InvalidRequestException) {
    this.ire = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.ire !== undefined && args.ire !== null) {
      this.ire = args.ire;
    }
  }
};
Actordb_exec_sql_param_result.prototype = {};
Actordb_exec_sql_param_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ire = new ttypes.InvalidRequestException();
        this.ire.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_exec_sql_param_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_exec_sql_param_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ire !== null && this.ire !== undefined) {
    output.writeFieldBegin('ire', Thrift.Type.STRUCT, 1);
    this.ire.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_actor_types_args = function(args) {
};
Actordb_actor_types_args.prototype = {};
Actordb_actor_types_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_actor_types_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_actor_types_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_actor_types_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Actordb_actor_types_result.prototype = {};
Actordb_actor_types_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size114 = 0;
        var _rtmp3118;
        this.success = [];
        var _etype117 = 0;
        _rtmp3118 = input.readListBegin();
        _etype117 = _rtmp3118.etype;
        _size114 = _rtmp3118.size;
        for (var _i119 = 0; _i119 < _size114; ++_i119)
        {
          var elem120 = null;
          elem120 = input.readString();
          this.success.push(elem120);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_actor_types_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_actor_types_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter121 in this.success)
    {
      if (this.success.hasOwnProperty(iter121))
      {
        iter121 = this.success[iter121];
        output.writeString(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_actor_tables_args = function(args) {
  this.actor_type = null;
  if (args) {
    if (args.actor_type !== undefined && args.actor_type !== null) {
      this.actor_type = args.actor_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actor_type is unset!');
    }
  }
};
Actordb_actor_tables_args.prototype = {};
Actordb_actor_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.actor_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_actor_tables_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_actor_tables_args');
  if (this.actor_type !== null && this.actor_type !== undefined) {
    output.writeFieldBegin('actor_type', Thrift.Type.STRING, 1);
    output.writeString(this.actor_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_actor_tables_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Actordb_actor_tables_result.prototype = {};
Actordb_actor_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size122 = 0;
        var _rtmp3126;
        this.success = [];
        var _etype125 = 0;
        _rtmp3126 = input.readListBegin();
        _etype125 = _rtmp3126.etype;
        _size122 = _rtmp3126.size;
        for (var _i127 = 0; _i127 < _size122; ++_i127)
        {
          var elem128 = null;
          elem128 = input.readString();
          this.success.push(elem128);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_actor_tables_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_actor_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter129 in this.success)
    {
      if (this.success.hasOwnProperty(iter129))
      {
        iter129 = this.success[iter129];
        output.writeString(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_actor_columns_args = function(args) {
  this.actor_type = null;
  this.actor_table = null;
  if (args) {
    if (args.actor_type !== undefined && args.actor_type !== null) {
      this.actor_type = args.actor_type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actor_type is unset!');
    }
    if (args.actor_table !== undefined && args.actor_table !== null) {
      this.actor_table = args.actor_table;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field actor_table is unset!');
    }
  }
};
Actordb_actor_columns_args.prototype = {};
Actordb_actor_columns_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.actor_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.actor_table = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_actor_columns_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_actor_columns_args');
  if (this.actor_type !== null && this.actor_type !== undefined) {
    output.writeFieldBegin('actor_type', Thrift.Type.STRING, 1);
    output.writeString(this.actor_type);
    output.writeFieldEnd();
  }
  if (this.actor_table !== null && this.actor_table !== undefined) {
    output.writeFieldBegin('actor_table', Thrift.Type.STRING, 2);
    output.writeString(this.actor_table);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_actor_columns_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
  }
};
Actordb_actor_columns_result.prototype = {};
Actordb_actor_columns_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size130 = 0;
        var _rtmp3134;
        this.success = {};
        var _ktype131 = 0;
        var _vtype132 = 0;
        _rtmp3134 = input.readMapBegin();
        _ktype131 = _rtmp3134.ktype;
        _vtype132 = _rtmp3134.vtype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var key136 = null;
          var val137 = null;
          key136 = input.readString();
          val137 = input.readString();
          this.success[key136] = val137;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_actor_columns_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_actor_columns_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter138 in this.success)
    {
      if (this.success.hasOwnProperty(kiter138))
      {
        var viter139 = this.success[kiter138];
        output.writeString(kiter138);
        output.writeString(viter139);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_uniqid_args = function(args) {
};
Actordb_uniqid_args.prototype = {};
Actordb_uniqid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_uniqid_args.prototype.write = function(output) {
  output.writeStructBegin('Actordb_uniqid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Actordb_uniqid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Actordb_uniqid_result.prototype = {};
Actordb_uniqid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Actordb_uniqid_result.prototype.write = function(output) {
  output.writeStructBegin('Actordb_uniqid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActordbClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ActordbClient.prototype = {};
ActordbClient.prototype.seqid = function() { return this._seqid; }
ActordbClient.prototype.new_seqid = function() { return this._seqid += 1; }
ActordbClient.prototype.protocolVersion = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_protocolVersion();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_protocolVersion();
  }
};

ActordbClient.prototype.send_protocolVersion = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('protocolVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_protocolVersion_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_protocolVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_protocolVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('protocolVersion failed: unknown result');
};
ActordbClient.prototype.login = function(username, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_login(username, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_login(username, password);
  }
};

ActordbClient.prototype.send_login = function(username, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_login_args();
  args.username = username;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('login failed: unknown result');
};
ActordbClient.prototype.salt = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_salt();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_salt();
  }
};

ActordbClient.prototype.send_salt = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('salt', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_salt_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_salt = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_salt_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('salt failed: unknown result');
};
ActordbClient.prototype.exec_config = function(sql, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_config(sql);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_config(sql);
  }
};

ActordbClient.prototype.send_exec_config = function(sql) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_config', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_config_args();
  args.sql = sql;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_config = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_config_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_config failed: unknown result');
};
ActordbClient.prototype.exec_schema = function(sql, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_schema(sql);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_schema(sql);
  }
};

ActordbClient.prototype.send_exec_schema = function(sql) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_schema', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_schema_args();
  args.sql = sql;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_schema failed: unknown result');
};
ActordbClient.prototype.exec_single = function(actorname, actortype, sql, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_single(actorname, actortype, sql, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_single(actorname, actortype, sql, flags);
  }
};

ActordbClient.prototype.send_exec_single = function(actorname, actortype, sql, flags) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_single', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_single_args();
  args.actorname = actorname;
  args.actortype = actortype;
  args.sql = sql;
  args.flags = flags;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_single = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_single_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_single failed: unknown result');
};
ActordbClient.prototype.exec_single_param = function(actorname, actortype, sql, flags, bindingvals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_single_param(actorname, actortype, sql, flags, bindingvals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_single_param(actorname, actortype, sql, flags, bindingvals);
  }
};

ActordbClient.prototype.send_exec_single_param = function(actorname, actortype, sql, flags, bindingvals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_single_param', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_single_param_args();
  args.actorname = actorname;
  args.actortype = actortype;
  args.sql = sql;
  args.flags = flags;
  args.bindingvals = bindingvals;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_single_param = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_single_param_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_single_param failed: unknown result');
};
ActordbClient.prototype.exec_multi = function(actors, actortype, sql, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_multi(actors, actortype, sql, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_multi(actors, actortype, sql, flags);
  }
};

ActordbClient.prototype.send_exec_multi = function(actors, actortype, sql, flags) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_multi', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_multi_args();
  args.actors = actors;
  args.actortype = actortype;
  args.sql = sql;
  args.flags = flags;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_multi = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_multi_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_multi failed: unknown result');
};
ActordbClient.prototype.exec_all = function(actortype, sql, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_all(actortype, sql, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_all(actortype, sql, flags);
  }
};

ActordbClient.prototype.send_exec_all = function(actortype, sql, flags) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_all', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_all_args();
  args.actortype = actortype;
  args.sql = sql;
  args.flags = flags;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_all = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_all_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_all failed: unknown result');
};
ActordbClient.prototype.exec_sql = function(sql, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_sql(sql);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_sql(sql);
  }
};

ActordbClient.prototype.send_exec_sql = function(sql) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_sql', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_sql_args();
  args.sql = sql;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_sql = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_sql_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_sql failed: unknown result');
};
ActordbClient.prototype.exec_sql_param = function(sql, bindingvals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exec_sql_param(sql, bindingvals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exec_sql_param(sql, bindingvals);
  }
};

ActordbClient.prototype.send_exec_sql_param = function(sql, bindingvals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exec_sql_param', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_exec_sql_param_args();
  args.sql = sql;
  args.bindingvals = bindingvals;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_exec_sql_param = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_exec_sql_param_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ire) {
    return callback(result.ire);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exec_sql_param failed: unknown result');
};
ActordbClient.prototype.actor_types = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_actor_types();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_actor_types();
  }
};

ActordbClient.prototype.send_actor_types = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('actor_types', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_actor_types_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_actor_types = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_actor_types_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('actor_types failed: unknown result');
};
ActordbClient.prototype.actor_tables = function(actor_type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_actor_tables(actor_type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_actor_tables(actor_type);
  }
};

ActordbClient.prototype.send_actor_tables = function(actor_type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('actor_tables', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_actor_tables_args();
  args.actor_type = actor_type;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_actor_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_actor_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('actor_tables failed: unknown result');
};
ActordbClient.prototype.actor_columns = function(actor_type, actor_table, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_actor_columns(actor_type, actor_table);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_actor_columns(actor_type, actor_table);
  }
};

ActordbClient.prototype.send_actor_columns = function(actor_type, actor_table) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('actor_columns', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_actor_columns_args();
  args.actor_type = actor_type;
  args.actor_table = actor_table;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_actor_columns = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_actor_columns_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('actor_columns failed: unknown result');
};
ActordbClient.prototype.uniqid = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_uniqid();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_uniqid();
  }
};

ActordbClient.prototype.send_uniqid = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('uniqid', Thrift.MessageType.CALL, this.seqid());
  var args = new Actordb_uniqid_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ActordbClient.prototype.recv_uniqid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Actordb_uniqid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('uniqid failed: unknown result');
};
ActordbProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ActordbProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ActordbProcessor.prototype.process_protocolVersion = function(seqid, input, output) {
  var args = new Actordb_protocolVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.protocolVersion.length === 0) {
    Q.fcall(this._handler.protocolVersion)
      .then(function(result) {
        var result = new Actordb_protocolVersion_result({success: result});
        output.writeMessageBegin("protocolVersion", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("protocolVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.protocolVersion(function (err, result) {
      if (err == null) {
        var result = new Actordb_protocolVersion_result((err != null ? err : {success: result}));
        output.writeMessageBegin("protocolVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("protocolVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_login = function(seqid, input, output) {
  var args = new Actordb_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.login.length === 2) {
    Q.fcall(this._handler.login, args.username, args.password)
      .then(function(result) {
        var result = new Actordb_login_result({success: result});
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_login_result(err);
          output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.login(args.username, args.password, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_login_result((err != null ? err : {success: result}));
        output.writeMessageBegin("login", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_salt = function(seqid, input, output) {
  var args = new Actordb_salt_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.salt.length === 0) {
    Q.fcall(this._handler.salt)
      .then(function(result) {
        var result = new Actordb_salt_result({success: result});
        output.writeMessageBegin("salt", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("salt", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.salt(function (err, result) {
      if (err == null) {
        var result = new Actordb_salt_result((err != null ? err : {success: result}));
        output.writeMessageBegin("salt", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("salt", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_config = function(seqid, input, output) {
  var args = new Actordb_exec_config_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_config.length === 1) {
    Q.fcall(this._handler.exec_config, args.sql)
      .then(function(result) {
        var result = new Actordb_exec_config_result({success: result});
        output.writeMessageBegin("exec_config", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_config_result(err);
          output.writeMessageBegin("exec_config", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_config", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_config(args.sql, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_config_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_config", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_config", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_schema = function(seqid, input, output) {
  var args = new Actordb_exec_schema_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_schema.length === 1) {
    Q.fcall(this._handler.exec_schema, args.sql)
      .then(function(result) {
        var result = new Actordb_exec_schema_result({success: result});
        output.writeMessageBegin("exec_schema", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_schema_result(err);
          output.writeMessageBegin("exec_schema", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_schema", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_schema(args.sql, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_schema_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_single = function(seqid, input, output) {
  var args = new Actordb_exec_single_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_single.length === 4) {
    Q.fcall(this._handler.exec_single, args.actorname, args.actortype, args.sql, args.flags)
      .then(function(result) {
        var result = new Actordb_exec_single_result({success: result});
        output.writeMessageBegin("exec_single", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_single_result(err);
          output.writeMessageBegin("exec_single", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_single", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_single(args.actorname, args.actortype, args.sql, args.flags, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_single_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_single", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_single", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_single_param = function(seqid, input, output) {
  var args = new Actordb_exec_single_param_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_single_param.length === 5) {
    Q.fcall(this._handler.exec_single_param, args.actorname, args.actortype, args.sql, args.flags, args.bindingvals)
      .then(function(result) {
        var result = new Actordb_exec_single_param_result({success: result});
        output.writeMessageBegin("exec_single_param", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_single_param_result(err);
          output.writeMessageBegin("exec_single_param", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_single_param", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_single_param(args.actorname, args.actortype, args.sql, args.flags, args.bindingvals, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_single_param_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_single_param", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_single_param", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_multi = function(seqid, input, output) {
  var args = new Actordb_exec_multi_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_multi.length === 4) {
    Q.fcall(this._handler.exec_multi, args.actors, args.actortype, args.sql, args.flags)
      .then(function(result) {
        var result = new Actordb_exec_multi_result({success: result});
        output.writeMessageBegin("exec_multi", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_multi_result(err);
          output.writeMessageBegin("exec_multi", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_multi", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_multi(args.actors, args.actortype, args.sql, args.flags, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_multi_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_multi", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_multi", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_all = function(seqid, input, output) {
  var args = new Actordb_exec_all_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_all.length === 3) {
    Q.fcall(this._handler.exec_all, args.actortype, args.sql, args.flags)
      .then(function(result) {
        var result = new Actordb_exec_all_result({success: result});
        output.writeMessageBegin("exec_all", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_all_result(err);
          output.writeMessageBegin("exec_all", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_all", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_all(args.actortype, args.sql, args.flags, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_all_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_all", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_all", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_sql = function(seqid, input, output) {
  var args = new Actordb_exec_sql_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_sql.length === 1) {
    Q.fcall(this._handler.exec_sql, args.sql)
      .then(function(result) {
        var result = new Actordb_exec_sql_result({success: result});
        output.writeMessageBegin("exec_sql", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_sql_result(err);
          output.writeMessageBegin("exec_sql", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_sql", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_sql(args.sql, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_sql_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_sql", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_sql", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_exec_sql_param = function(seqid, input, output) {
  var args = new Actordb_exec_sql_param_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exec_sql_param.length === 2) {
    Q.fcall(this._handler.exec_sql_param, args.sql, args.bindingvals)
      .then(function(result) {
        var result = new Actordb_exec_sql_param_result({success: result});
        output.writeMessageBegin("exec_sql_param", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidRequestException) {
          var result = new Actordb_exec_sql_param_result(err);
          output.writeMessageBegin("exec_sql_param", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exec_sql_param", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exec_sql_param(args.sql, args.bindingvals, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidRequestException) {
        var result = new Actordb_exec_sql_param_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exec_sql_param", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exec_sql_param", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_actor_types = function(seqid, input, output) {
  var args = new Actordb_actor_types_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.actor_types.length === 0) {
    Q.fcall(this._handler.actor_types)
      .then(function(result) {
        var result = new Actordb_actor_types_result({success: result});
        output.writeMessageBegin("actor_types", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("actor_types", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.actor_types(function (err, result) {
      if (err == null) {
        var result = new Actordb_actor_types_result((err != null ? err : {success: result}));
        output.writeMessageBegin("actor_types", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("actor_types", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_actor_tables = function(seqid, input, output) {
  var args = new Actordb_actor_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.actor_tables.length === 1) {
    Q.fcall(this._handler.actor_tables, args.actor_type)
      .then(function(result) {
        var result = new Actordb_actor_tables_result({success: result});
        output.writeMessageBegin("actor_tables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("actor_tables", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.actor_tables(args.actor_type, function (err, result) {
      if (err == null) {
        var result = new Actordb_actor_tables_result((err != null ? err : {success: result}));
        output.writeMessageBegin("actor_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("actor_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_actor_columns = function(seqid, input, output) {
  var args = new Actordb_actor_columns_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.actor_columns.length === 2) {
    Q.fcall(this._handler.actor_columns, args.actor_type, args.actor_table)
      .then(function(result) {
        var result = new Actordb_actor_columns_result({success: result});
        output.writeMessageBegin("actor_columns", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("actor_columns", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.actor_columns(args.actor_type, args.actor_table, function (err, result) {
      if (err == null) {
        var result = new Actordb_actor_columns_result((err != null ? err : {success: result}));
        output.writeMessageBegin("actor_columns", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("actor_columns", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ActordbProcessor.prototype.process_uniqid = function(seqid, input, output) {
  var args = new Actordb_uniqid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.uniqid.length === 0) {
    Q.fcall(this._handler.uniqid)
      .then(function(result) {
        var result = new Actordb_uniqid_result({success: result});
        output.writeMessageBegin("uniqid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uniqid", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.uniqid(function (err, result) {
      if (err == null) {
        var result = new Actordb_uniqid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("uniqid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("uniqid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

