//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ErrorCode = {
  'NotLoggedIn' : 1,
  'EmptyActorName' : 2,
  'InvalidActorName' : 3,
  'InvalidType' : 4,
  'NotPermitted' : 5,
  'SqlError' : 6,
  'ConsensusTimeout' : 7,
  'ConsensusImpossibleAtm' : 8,
  'LocalNodeMissing' : 9,
  'MissingGroupInsert' : 10,
  'MissingNodesInsert' : 11,
  'MissingRootUser' : 12,
  'LoginFailed' : 13,
  'NotInitialized' : 14,
  'NoCreate' : 15,
  'Error' : 100
};
Val = module.exports.Val = function(args) {
  this.bigint = null;
  this.integer = null;
  this.smallint = null;
  this.real = null;
  this.bval = null;
  this.text = null;
  this.isnull = null;
  this.blob = null;
  if (args) {
    if (args.bigint !== undefined && args.bigint !== null) {
      this.bigint = args.bigint;
    }
    if (args.integer !== undefined && args.integer !== null) {
      this.integer = args.integer;
    }
    if (args.smallint !== undefined && args.smallint !== null) {
      this.smallint = args.smallint;
    }
    if (args.real !== undefined && args.real !== null) {
      this.real = args.real;
    }
    if (args.bval !== undefined && args.bval !== null) {
      this.bval = args.bval;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.isnull !== undefined && args.isnull !== null) {
      this.isnull = args.isnull;
    }
    if (args.blob !== undefined && args.blob !== null) {
      this.blob = args.blob;
    }
  }
};
Val.prototype = {};
Val.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.bigint = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.integer = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.smallint = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.real = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.bval = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isnull = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.blob = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Val.prototype.write = function(output) {
  output.writeStructBegin('Val');
  if (this.bigint !== null && this.bigint !== undefined) {
    output.writeFieldBegin('bigint', Thrift.Type.I64, 1);
    output.writeI64(this.bigint);
    output.writeFieldEnd();
  }
  if (this.integer !== null && this.integer !== undefined) {
    output.writeFieldBegin('integer', Thrift.Type.I32, 2);
    output.writeI32(this.integer);
    output.writeFieldEnd();
  }
  if (this.smallint !== null && this.smallint !== undefined) {
    output.writeFieldBegin('smallint', Thrift.Type.I16, 3);
    output.writeI16(this.smallint);
    output.writeFieldEnd();
  }
  if (this.real !== null && this.real !== undefined) {
    output.writeFieldBegin('real', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.real);
    output.writeFieldEnd();
  }
  if (this.bval !== null && this.bval !== undefined) {
    output.writeFieldBegin('bval', Thrift.Type.BOOL, 5);
    output.writeBool(this.bval);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 6);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.isnull !== null && this.isnull !== undefined) {
    output.writeFieldBegin('isnull', Thrift.Type.BOOL, 7);
    output.writeBool(this.isnull);
    output.writeFieldEnd();
  }
  if (this.blob !== null && this.blob !== undefined) {
    output.writeFieldBegin('blob', Thrift.Type.STRING, 8);
    output.writeBinary(this.blob);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ReadResult = module.exports.ReadResult = function(args) {
  this.hasMore = null;
  this.columns = null;
  this.rows = null;
  if (args) {
    if (args.hasMore !== undefined && args.hasMore !== null) {
      this.hasMore = args.hasMore;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasMore is unset!');
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field columns is unset!');
    }
    if (args.rows !== undefined && args.rows !== null) {
      this.rows = Thrift.copyList(args.rows, [Thrift.copyMap, ttypes.Val]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rows is unset!');
    }
  }
};
ReadResult.prototype = {};
ReadResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasMore = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.columns = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.columns.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.rows = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          var _size14 = 0;
          var _rtmp318;
          elem13 = {};
          var _ktype15 = 0;
          var _vtype16 = 0;
          _rtmp318 = input.readMapBegin();
          _ktype15 = _rtmp318.ktype;
          _vtype16 = _rtmp318.vtype;
          _size14 = _rtmp318.size;
          for (var _i19 = 0; _i19 < _size14; ++_i19)
          {
            var key20 = null;
            var val21 = null;
            key20 = input.readString();
            val21 = new ttypes.Val();
            val21.read(input);
            elem13[key20] = val21;
          }
          input.readMapEnd();
          this.rows.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ReadResult.prototype.write = function(output) {
  output.writeStructBegin('ReadResult');
  if (this.hasMore !== null && this.hasMore !== undefined) {
    output.writeFieldBegin('hasMore', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasMore);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter22 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter22))
      {
        iter22 = this.columns[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rows !== null && this.rows !== undefined) {
    output.writeFieldBegin('rows', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.MAP, this.rows.length);
    for (var iter23 in this.rows)
    {
      if (this.rows.hasOwnProperty(iter23))
      {
        iter23 = this.rows[iter23];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(iter23));
        for (var kiter24 in iter23)
        {
          if (iter23.hasOwnProperty(kiter24))
          {
            var viter25 = iter23[kiter24];
            output.writeString(kiter24);
            viter25.write(output);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WriteResult = module.exports.WriteResult = function(args) {
  this.lastChangeRowid = null;
  this.rowsChanged = null;
  if (args) {
    if (args.lastChangeRowid !== undefined && args.lastChangeRowid !== null) {
      this.lastChangeRowid = args.lastChangeRowid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lastChangeRowid is unset!');
    }
    if (args.rowsChanged !== undefined && args.rowsChanged !== null) {
      this.rowsChanged = args.rowsChanged;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field rowsChanged is unset!');
    }
  }
};
WriteResult.prototype = {};
WriteResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lastChangeRowid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.rowsChanged = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WriteResult.prototype.write = function(output) {
  output.writeStructBegin('WriteResult');
  if (this.lastChangeRowid !== null && this.lastChangeRowid !== undefined) {
    output.writeFieldBegin('lastChangeRowid', Thrift.Type.I64, 1);
    output.writeI64(this.lastChangeRowid);
    output.writeFieldEnd();
  }
  if (this.rowsChanged !== null && this.rowsChanged !== undefined) {
    output.writeFieldBegin('rowsChanged', Thrift.Type.I64, 2);
    output.writeI64(this.rowsChanged);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoginResult = module.exports.LoginResult = function(args) {
  this.success = null;
  this.error = null;
  this.readaccess = null;
  this.writeaccess = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field success is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.readaccess !== undefined && args.readaccess !== null) {
      this.readaccess = Thrift.copyList(args.readaccess, [null]);
    }
    if (args.writeaccess !== undefined && args.writeaccess !== null) {
      this.writeaccess = Thrift.copyList(args.writeaccess, [null]);
    }
  }
};
LoginResult.prototype = {};
LoginResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.error = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.readaccess = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.readaccess.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size33 = 0;
        var _rtmp337;
        this.writeaccess = [];
        var _etype36 = 0;
        _rtmp337 = input.readListBegin();
        _etype36 = _rtmp337.etype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var elem39 = null;
          elem39 = input.readString();
          this.writeaccess.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoginResult.prototype.write = function(output) {
  output.writeStructBegin('LoginResult');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRING, 2);
    output.writeString(this.error);
    output.writeFieldEnd();
  }
  if (this.readaccess !== null && this.readaccess !== undefined) {
    output.writeFieldBegin('readaccess', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.readaccess.length);
    for (var iter40 in this.readaccess)
    {
      if (this.readaccess.hasOwnProperty(iter40))
      {
        iter40 = this.readaccess[iter40];
        output.writeString(iter40);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.writeaccess !== null && this.writeaccess !== undefined) {
    output.writeFieldBegin('writeaccess', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.writeaccess.length);
    for (var iter41 in this.writeaccess)
    {
      if (this.writeaccess.hasOwnProperty(iter41))
      {
        iter41 = this.writeaccess[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.rdRes = null;
  this.wrRes = null;
  if (args) {
    if (args.rdRes !== undefined && args.rdRes !== null) {
      this.rdRes = new ttypes.ReadResult(args.rdRes);
    }
    if (args.wrRes !== undefined && args.wrRes !== null) {
      this.wrRes = new ttypes.WriteResult(args.wrRes);
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rdRes = new ttypes.ReadResult();
        this.rdRes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.wrRes = new ttypes.WriteResult();
        this.wrRes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.rdRes !== null && this.rdRes !== undefined) {
    output.writeFieldBegin('rdRes', Thrift.Type.STRUCT, 1);
    this.rdRes.write(output);
    output.writeFieldEnd();
  }
  if (this.wrRes !== null && this.wrRes !== undefined) {
    output.writeFieldBegin('wrRes', Thrift.Type.STRUCT, 2);
    this.wrRes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidRequestException = module.exports.InvalidRequestException = function(args) {
  Thrift.TException.call(this, "InvalidRequestException")
  this.name = "InvalidRequestException"
  this.code = null;
  this.info = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = args.info;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field info is unset!');
    }
  }
};
Thrift.inherits(InvalidRequestException, Thrift.TException);
InvalidRequestException.prototype.name = 'InvalidRequestException';
InvalidRequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidRequestException.prototype.write = function(output) {
  output.writeStructBegin('InvalidRequestException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 2);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '1.3.0';
